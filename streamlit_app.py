# streamlit_app.py
import os
from datetime import datetime, date, time as dtime, timedelta, timezone
from typing import Optional
from io import BytesIO
import zipfile

import streamlit as st
import pandas as pd
import altair as alt

from zoneinfo import ZoneInfo
TZ = ZoneInfo("Asia/Aqtobe")  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏

# ====== –ü–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—á–µ—Ä–∞, 4 —Å–µ–Ω—Ç—è–±—Ä—è 14:00‚Äì19:00, –ª–æ–∫–∞–ª—å–Ω–æ) ======
DEFAULT_LOCAL_DATE = date(2025, 9, 4)
DEFAULT_START_HOUR = 14
DEFAULT_END_HOUR   = 19  # –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞, –Ω–æ –º—ã –±–µ—Ä—ë–º –¥–æ 19:00:00 max

# ====== –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ======
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
    page_icon="ü•î",
    layout="wide",
)

# ====== –ö–õ–Æ–ß–ò (—á–µ—Ä–µ–∑ .streamlit/secrets.toml –∏–ª–∏ env) ======
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ====== –°–¢–ò–õ–ò ======
st.markdown(
    """
    <style>
      .block-container { padding-top: 2.25rem; }
      .hdr { display:flex; justify-content:space-between; align-items:center; }
      .hdr h1 { margin:0; font-size:26px; font-weight:800; letter-spacing:.3px; }
      .hdr .right { display:flex; gap:.5rem; }
      .hdr + .spacer { height: 10px; }
      hr { margin: 10px 0 22px 0; opacity:.25; }
      .stDateInput, .stNumberInput, .stTextInput { margin-bottom: .35rem; }
    </style>
    """,
    unsafe_allow_html=True,
)

def header():
    col_l, col_r = st.columns([3,1])
    with col_l:
        st.markdown(
            "<div class='hdr'><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1></div>",
            unsafe_allow_html=True
        )
    with col_r:
        if st.button("‚Üª –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", use_container_width=True):
            st.cache_data.clear()
            st.rerun()
    st.markdown("<hr/>", unsafe_allow_html=True)

# ====== –í–†–ï–ú–Ø/–ö–û–ù–í–ï–†–°–ò–ò ======
def to_aware_utc(dt: datetime) -> datetime:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ UTC-aware."""
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

def local_range_to_utc(d: date, start_h: int, end_h: int) -> tuple[datetime, datetime]:
    start_local = datetime.combine(d, dtime(hour=start_h, minute=0, second=0)).replace(tzinfo=TZ)
    end_local   = datetime.combine(d, dtime(hour=end_h,   minute=0, second=0)).replace(tzinfo=TZ)
    return start_local.astimezone(timezone.utc), end_local.astimezone(timezone.utc)

# ====== –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• ======
@st.cache_data(ttl=5)
def fetch_events(point: Optional[str], start_dt: datetime, end_dt: datetime) -> pd.DataFrame:
    """ts (UTC-aware), point, potato_id, width/height (–≤ –ë–î –º–æ–≥—É—Ç –±—ã—Ç—å width_cm/height_cm –ò–õ–ò width/height)."""
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","point","potato_id","width","height","width_cm","height_cm"])
    try:
        q = _sb.table("events").select("*").order("ts", desc=False)
        if point:
            q = q.eq("point", point)
        data = q.gte("ts", to_aware_utc(start_dt).isoformat())\
                .lte("ts", to_aware_utc(end_dt).isoformat())\
                .execute().data
        df = pd.DataFrame(data) if data else pd.DataFrame()
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")  # AWARE UTC
        # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        for col in ("width_cm","height_cm","width","height"):
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase: {e}")
        return pd.DataFrame(columns=["ts","point","potato_id","width","height","width_cm","height_cm"])

# ====== –ê–ì–†–ï–ì–ê–¶–ò–ò ======
def hour_counts_collected(df: pd.DataFrame) -> pd.DataFrame:
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å–∞–º –¥–ª—è '–°–æ–±—Ä–∞–Ω–æ (—à—Ç)'. –ë–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ potato_id –∑–∞ —á–∞—Å."""
    if df.empty or "ts" not in df.columns:
        return pd.DataFrame({"hour": [], "collected": []})
    ts_local = df["ts"].dt.tz_convert(TZ)
    hours_naive = ts_local.dt.floor("h").dt.tz_localize(None)
    g = (
        pd.DataFrame({"hour": hours_naive, "potato_id": df["potato_id"]})
        .groupby("hour", as_index=False)
        .agg(collected=("potato_id", "nunique"))
    )
    return g

# ====== –ö–ê–¢–ï–ì–û–†–ò–ò (–≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö) ======
# –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤ –ú–ò–õ–õ–ò–ú–ï–¢–†–ê–•:
CAT_LABELS = ["<30 –º–º", "30‚Äì40 –º–º", "40‚Äì50 –º–º", "50‚Äì60 –º–º", ">60 –º–º"]
CAT_BINS_MM = [0, 30, 40, 50, 60, 1_000_000]  # –ø—Ä–∞–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π

def add_mm_columns(df: pd.DataFrame) -> pd.DataFrame:
    """–°–æ–∑–¥–∞—ë—Ç width_mm/height_mm –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (width_cm/height_cm –∏–ª–∏ width/height)."""
    df = df.copy()
    # width_cm/height_cm –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ; –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º width/height. –í—Å—ë —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Å–º -> –º–º (√ó10).
    if "width_mm" not in df.columns:
        if "width_cm" in df.columns:
            df["width_mm"] = df["width_cm"] * 10.0
        elif "width" in df.columns:
            df["width_mm"] = df["width"] * 10.0
        else:
            df["width_mm"] = pd.NA
    if "height_mm" not in df.columns:
        if "height_cm" in df.columns:
            df["height_mm"] = df["height_cm"] * 10.0
        elif "height" in df.columns:
            df["height_mm"] = df["height"] * 10.0
        else:
            df["height_mm"] = pd.NA
    # –∫ —á–∏—Å–ª–∞–º
    df["width_mm"]  = pd.to_numeric(df["width_mm"], errors="coerce")
    df["height_mm"] = pd.to_numeric(df["height_mm"], errors="coerce")
    return df

def bins_table_mm_collected(df: pd.DataFrame) -> pd.DataFrame:
    """–¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º). –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∏—Ä–∏–Ω—É (width_mm)."""
    if df.empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    d = add_mm_columns(df)
    if "width_mm" not in d.columns or d["width_mm"].dropna().empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})

    cut = pd.cut(
        d["width_mm"].fillna(-1),
        bins=CAT_BINS_MM, labels=CAT_LABELS, right=False, include_lowest=True
    )
    vc = cut.value_counts().reindex(CAT_LABELS).fillna(0).astype(int)
    return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [int(vc[c]) for c in CAT_LABELS]})

# ====== –ß–ê–†–¢ (–°–æ–±—Ä–∞–Ω–æ) ======
def render_hour_chart_collected(df: pd.DataFrame):
    hc = hour_counts_collected(df)
    if hc.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return pd.DataFrame()

    chart = (
        alt.Chart(hc)
        .mark_bar()
        .encode(
            x=alt.X("hour:T", title="–î–∞—Ç–∞ –∏ —á–∞—Å"),
            y=alt.Y("collected:Q", title="–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"),
            tooltip=[alt.Tooltip("hour:T", title="–ß–∞—Å"), alt.Tooltip("collected:Q", title="–®—Ç")],
        )
        .properties(height=320, padding={"top": 10, "right": 12, "bottom": 44, "left": 8})
        .configure_axis(labelFontSize=12, titleFontSize=12)
    )
    st.altair_chart(chart, use_container_width=True)
    st.markdown("<div style='height:12px'></div>", unsafe_allow_html=True)
    return hc

# ====== Excel –≤—ã–≥—Ä—É–∑–∫–∞ ======
def make_excel_bytes(hour_df: pd.DataFrame, bins_df: pd.DataFrame) -> tuple[bytes, str, str]:
    try:
        import xlsxwriter  # noqa: F401
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm") as writer:
            hour_df.to_excel(writer, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
            bins_df.to_excel(writer, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass

    try:
        import openpyxl  # noqa: F401
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl", datetime_format="yyyy-mm-dd hh:mm") as writer:
            hour_df.to_excel(writer, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
            bins_df.to_excel(writer, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass

    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr("–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º.csv", hour_df.to_csv(index=False))
        zf.writestr("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏_–º–º.csv",  bins_df.to_csv(index=False))
    return buf.getvalue(), "zip", "application/zip"

# ====== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ======
def page_dashboard():
    header()

    # –ü–µ—Ä–∏–æ–¥ (–∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω –ø–æ –¢–ó: –≤—á–µ—Ä–∞ 04.09 14:00‚Äì19:00 –ª–æ–∫–∞–ª—å–Ω–æ)
    st.caption("–ü–µ—Ä–∏–æ–¥: 04.09 —Å 14:00 –¥–æ 19:00 (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)")

    start_utc, end_utc = local_range_to_utc(DEFAULT_LOCAL_DATE, DEFAULT_START_HOUR, DEFAULT_END_HOUR)

    # –î–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ A (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ ‚Äú–°–æ–±—Ä–∞–Ω–æ‚Äù –ø–æ –¢–ó)
    dfA = fetch_events("A", start_utc, end_utc)

    # –ú–µ—Ç—Ä–∏–∫–∏
    collected_total = dfA["potato_id"].nunique() if not dfA.empty else 0
    st.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{collected_total}")

    # –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–°–æ–±—Ä–∞–Ω–æ)
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
    hc = render_hour_chart_collected(dfA)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)")
    bins_df = bins_table_mm_collected(dfA)
    st.dataframe(bins_df, use_container_width=True)

    # –≠–∫—Å–ø–æ—Ä—Ç
    hour_export = hc.rename(columns={"hour": "–î–∞—Ç–∞ –∏ —á–∞—Å", "collected": "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"}) if not hc.empty else pd.DataFrame(columns=["–î–∞—Ç–∞ –∏ —á–∞—Å","–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"])
    file_bytes, ext, mime = make_excel_bytes(hour_export, bins_df)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
        data=file_bytes,
        file_name=f"potato_report_2025-09-04_14-19.{ext}",
        mime=mime,
        use_container_width=True
    )

# ====== MAIN ======
def main():
    page_dashboard()

if __name__ == "__main__":
    main()
