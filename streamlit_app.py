# streamlit_app.py
import os
from datetime import datetime, date, time as dtime, timedelta, timezone
from typing import Optional
from io import BytesIO
import zipfile

import streamlit as st
import pandas as pd
import altair as alt
from zoneinfo import ZoneInfo

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ =====
TZ = ZoneInfo("Asia/Aqtobe")  # –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π, –≤ UI –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

# ¬´–¶–µ–ª–µ–≤–∞—è¬ª —Ä–∞–º–∫–∞ –Ω–∞ –≤—á–µ—Ä–∞: 4 —Å–µ–Ω—Ç—è–±—Ä—è 14:00‚Äì19:00 (–ª–æ–∫–∞–ª—å–Ω–æ)
TARGET_DAY_LOCAL   = date(2025, 9, 4)
TARGET_START_HOUR  = 14
TARGET_END_HOUR    = 19   # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (5 —á–∞—Å–æ–≤ –æ–∫–Ω–æ)

# ¬´–ñ–∏–≤–æ–µ¬ª –æ–∫–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
LIVE_MINUTES = 60

# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", page_icon="ü•î", layout="wide")

# ===== –ö–ª—é—á–∏ Supabase =====
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ===== –°—Ç–∏–ª–∏ =====
st.markdown("""
<style>
  .block-container { padding-top: 2.0rem; }
  .hdr { display:flex; justify-content:space-between; align-items:center; }
  .hdr h1 { margin:0; font-size:26px; font-weight:800; letter-spacing:.3px; }
  hr { margin: 10px 0 18px 0; opacity:.25; }
</style>
""", unsafe_allow_html=True)

def header():
    col_l, col_r = st.columns([3,1])
    with col_l:
        st.markdown("<div class='hdr'><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1></div>", unsafe_allow_html=True)
    with col_r:
        if st.button("‚Üª –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", use_container_width=True):
            st.cache_data.clear()
            st.rerun()
    st.markdown("<hr/>", unsafe_allow_html=True)

# ===== –í—Ä–µ–º—è/–∫–æ–Ω–≤–µ—Ä—Å–∏–∏ =====
def to_aware_utc(dt: datetime) -> datetime:
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

def local_range_to_utc(d: date, start_h: int, end_h: int) -> tuple[datetime, datetime]:
    start_local = datetime.combine(d, dtime(hour=start_h)).replace(tzinfo=TZ)
    end_local   = datetime.combine(d, dtime(hour=end_h)).replace(tzinfo=TZ)
    return start_local.astimezone(timezone.utc), end_local.astimezone(timezone.utc)

def live_window_utc(minutes: int = LIVE_MINUTES) -> tuple[datetime, datetime]:
    now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
    return now_utc - timedelta(minutes=minutes), now_utc

def remap_to_target_window(df: pd.DataFrame,
                           live_start_utc: datetime,
                           target_start_local: datetime) -> pd.DataFrame:
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç ts (UTC-aware) –≤ '–≤—á–µ—Ä–∞ 14:00 + –æ—Ñ—Ñ—Å–µ—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ live-–æ–∫–Ω–∞'."""
    if df.empty or "ts" not in df.columns:
        return df
    tgt_start_utc = target_start_local.astimezone(timezone.utc)
    # –æ—Ñ—Ñ—Å–µ—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ live-–æ–∫–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    offs = (df["ts"] - live_start_utc).dt.total_seconds().clip(lower=0)
    df = df.copy()
    df["ts_disp"] = tgt_start_utc + pd.to_timedelta(offs, unit="s")
    return df

# ===== –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö =====
@st.cache_data(ttl=5)
def fetch_events(point: Optional[str], start_dt: datetime, end_dt: datetime) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ts (UTC-aware), point, potato_id, width/height (—Å–º)."""
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","width","height"])
    try:
        q = _sb.table("events").select("*").order("ts", desc=False)
        if point:
            q = q.eq("point", point)
        rows = q.gte("ts", to_aware_utc(start_dt).isoformat())\
                .lte("ts", to_aware_utc(end_dt).isoformat())\
                .execute().data
        df = pd.DataFrame(rows) if rows else pd.DataFrame()
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")
        for c in ("width_cm","height_cm","width","height"):
            if c in df.columns:
                df[c] = pd.to_numeric(df[c], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase: {e}")
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","width","height"])

# ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (–º–º) =====
def add_mm_columns(df: pd.DataFrame) -> pd.DataFrame:
    d = df.copy()
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: *_cm; –∏–Ω–∞—á–µ width/height —Å—á–∏—Ç–∞–µ–º –≤ —Å–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–º
    if "width_cm" in d.columns:
        d["width_mm"] = d["width_cm"] * 10.0
    elif "width" in d.columns:
        d["width_mm"] = d["width"] * 10.0
    else:
        d["width_mm"] = pd.NA

    if "height_cm" in d.columns:
        d["height_mm"] = d["height_cm"] * 10.0
    elif "height" in d.columns:
        d["height_mm"] = d["height"] * 10.0
    else:
        d["height_mm"] = pd.NA

    d["width_mm"]  = pd.to_numeric(d["width_mm"], errors="coerce")
    d["height_mm"] = pd.to_numeric(d["height_mm"], errors="coerce")
    return d

# ===== –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ =====
def hour_counts_collected(df_disp: pd.DataFrame) -> pd.DataFrame:
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ß–ê–°–ê–ú –ø–æ –∫–æ–ª–æ–Ω–∫–µ ts_disp (—É–∂–µ –ø–µ—Ä–µ–º–∞–ø–ª–µ–Ω–Ω–æ–π –≤ '–≤—á–µ—Ä–∞')."""
    if df_disp.empty or "ts_disp" not in df_disp.columns:
        return pd.DataFrame({"hour": [], "collected": []})
    ts_local = df_disp["ts_disp"].dt.tz_convert(TZ)  # –∏–∑ UTC –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ, —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ –æ—Å–∏
    hours_naive = ts_local.dt.floor("h").dt.tz_localize(None)
    g = (
        pd.DataFrame({"hour": hours_naive, "potato_id": df_disp["potato_id"]})
        .groupby("hour", as_index=False)
        .agg(collected=("potato_id", "nunique"))
    )
    return g

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º) =====
CAT_LABELS = ["<30 –º–º", "30‚Äì40 –º–º", "40‚Äì50 –º–º", "50‚Äì60 –º–º", ">60 –º–º"]
CAT_BINS_MM = [0, 30, 40, 50, 60, 1_000_000]

def bins_table_mm(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    d = add_mm_columns(df)
    if "width_mm" not in d.columns or d["width_mm"].dropna().empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    cut = pd.cut(d["width_mm"].fillna(-1), bins=CAT_BINS_MM, labels=CAT_LABELS, right=False, include_lowest=True)
    vc = cut.value_counts().reindex(CAT_LABELS).fillna(0).astype(int)
    return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [int(vc[c]) for c in CAT_LABELS]})

# ===== –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ =====
def render_hour_chart(df_disp: pd.DataFrame):
    hc = hour_counts_collected(df_disp)
    if hc.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º (–ø–µ—Ä–µ–º–∞–ø–ª–µ–Ω–Ω–æ–º) –æ–∫–Ω–µ.")
        return pd.DataFrame()
    chart = (
        alt.Chart(hc)
        .mark_bar()
        .encode(
            x=alt.X("hour:T", title="–î–∞—Ç–∞ –∏ —á–∞—Å (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –≤—á–µ—Ä–∞)"),
            y=alt.Y("collected:Q", title="–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"),
            tooltip=[alt.Tooltip("hour:T", title="–ß–∞—Å"), alt.Tooltip("collected:Q", title="–®—Ç")],
        )
        .properties(height=320, padding={"top": 10, "right": 12, "bottom": 44, "left": 8})
        .configure_axis(labelFontSize=12, titleFontSize=12)
    )
    st.altair_chart(chart, use_container_width=True)
    st.markdown("<div style='height:10px'></div>", unsafe_allow_html=True)
    return hc

# ===== –≠–∫—Å–ø–æ—Ä—Ç =====
def make_excel_bytes(hour_df: pd.DataFrame, bins_df: pd.DataFrame) -> tuple[bytes, str, str]:
    try:
        import xlsxwriter  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–≤—á–µ—Ä–∞)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    try:
        import openpyxl  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–≤—á–µ—Ä–∞)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr("hour_flow.csv", hour_df.to_csv(index=False))
        zf.writestr("bins_mm.csv",  bins_df.to_csv(index=False))
    return buf.getvalue(), "zip", "application/zip"

# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====
def page_dashboard():
    header()

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –ø–µ—Ä–∏–æ–¥–∞
    st.caption("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –∏–¥—É—Ç –≤—á–µ—Ä–∞, 04.09, —Å 14:00 –¥–æ 19:00.")

    # 1) –ñ–∏–≤–æ–µ –æ–∫–Ω–æ (UTC)
    live_start_utc, live_end_utc = live_window_utc(LIVE_MINUTES)

    # 2) ¬´–í—á–µ—Ä–∞—à–Ω—è—è¬ª —Ä–∞–º–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ -> UTC)
    target_start_local = datetime.combine(TARGET_DAY_LOCAL, dtime(hour=TARGET_START_HOUR)).replace(tzinfo=TZ)
    target_end_local   = datetime.combine(TARGET_DAY_LOCAL, dtime(hour=TARGET_END_HOUR)).replace(tzinfo=TZ)

    # 3) –ß–∏—Ç–∞–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫—É A (—ç—Ç–æ –∏ –µ—Å—Ç—å ¬´–°–æ–±—Ä–∞–Ω–æ¬ª –ø–æ –¢–ó)
    df_live = fetch_events("A", live_start_utc, live_end_utc)

    # 4) –ü–µ—Ä–µ–Ω–æ—Å–∏–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ ¬´–≤—á–µ—Ä–∞—à–Ω—é—é¬ª —Ä–∞–º–∫—É
    df_disp = remap_to_target_window(df_live, live_start_utc, target_start_local)

    # 5) –ú–µ—Ç—Ä–∏–∫–∞ ¬´–°–æ–±—Ä–∞–Ω–æ (—à—Ç)¬ª
    collected_total = df_disp["potato_id"].nunique() if not df_disp.empty else 0
    st.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{collected_total}")

    # 6) –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (—É–∂–µ –ø–æ ts_disp)
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –≤—á–µ—Ä–∞)")
    hc = render_hour_chart(df_disp)

    # 7) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º) ‚Äî —Å—á–∏—Ç–∞–µ–º –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)")
    bins_df = bins_table_mm(df_disp)
    st.dataframe(bins_df, use_container_width=True)

    # 8) –≠–∫—Å–ø–æ—Ä—Ç
    hour_export = (
        hc.rename(columns={"hour": "–î–∞—Ç–∞ –∏ —á–∞—Å", "collected": "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"})
        if not hc.empty else pd.DataFrame(columns=["–î–∞—Ç–∞ –∏ —á–∞—Å","–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"])
    )
    file_bytes, ext, mime = make_excel_bytes(hour_export, bins_df)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
        data=file_bytes,
        file_name=f"potato_report_as_if_2025-09-04_14-19.{ext}",
        mime=mime,
        use_container_width=True
    )

# ===== MAIN =====
def main():
    page_dashboard()

if __name__ == "__main__":
    main()
