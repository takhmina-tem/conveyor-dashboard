# streamlit_app.py
import os
from datetime import datetime, date, time, timedelta, timezone
from typing import Optional

import streamlit as st
import pandas as pd
import altair as alt

# ====== –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ======
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
    page_icon="ü•î",
    layout="wide",
)

# ====== –ö–õ–Æ–ß–ò (—á–µ—Ä–µ–∑ .streamlit/secrets.toml –∏–ª–∏ env) ======
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ====== –û–§–û–†–ú–õ–ï–ù–ò–ï ======
st.markdown(
    "<style>.block-container{padding-top:1.2rem}.hdr{display:flex;justify-content:space-between;align-items:center}.hdr h1{margin:0;font-size:26px;font-weight:800;letter-spacing:.3px}.hdr .sub{opacity:.8}hr{margin:8px 0 16px 0;opacity:.25}div[aria-live='polite']{display:none!important}</style>",
    unsafe_allow_html=True,
)

def header(sub=""):
    st.markdown(
        '<div class="hdr"><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1>'
        f'<div class="sub">{sub}</div></div><hr/>',
        unsafe_allow_html=True
    )

def df_view(df: pd.DataFrame, caption: str = ""):
    if caption:
        st.caption(caption)
    st.dataframe(df, use_container_width=True)

# ====== –°–ï–°–°–ò–Ø/–†–û–£–¢–ï–† ======
if "authed" not in st.session_state:
    st.session_state["authed"] = False
if "route" not in st.session_state:
    st.session_state["route"] = "login"  # 'login' | 'app'

def go(page: str):
    st.session_state["route"] = page
    st.rerun()

# ====== –î–ê–¢–´ ======
def _ensure_aware_utc(dt: datetime) -> datetime:
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

def safe_datetime_input(label: str, value: datetime) -> datetime:
    if hasattr(st, "datetime_input"):
        dt = st.datetime_input(label, value=value)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        else:
            dt = dt.astimezone(timezone.utc)
        return dt
    # –§–æ–ª–ª–±–µ–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Streamlit
    c1, c2 = st.columns([1.2, 1])
    with c1:
        d = st.date_input(label + " ‚Äî –¥–∞—Ç–∞", value=value.date())
    with c2:
        t = st.time_input(label + " ‚Äî –≤—Ä–µ–º—è", value=value.time())
    return datetime.combine(d, t).replace(tzinfo=timezone.utc)

# ====== –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• ======
def fetch_events(point: Optional[str], start_dt: datetime, end_dt: datetime, batch: Optional[str] = None) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ts (naive UTC), point, potato_id, width_cm, height_cm, batch."""
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])

    try:
        q = _sb.table("events").select("*").order("ts", desc=False)
        if point:
            q = q.eq("point", point)
        if batch:
            q = q.eq("batch", batch)

        start_iso = _ensure_aware_utc(start_dt).isoformat()
        end_iso   = _ensure_aware_utc(end_dt).isoformat()
        data = q.gte("ts", start_iso).lte("ts", end_iso).execute().data

        df = pd.DataFrame(data) if data else pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")\
                          .dt.tz_convert("UTC").dt.tz_localize(None)
        for col in ("width_cm","height_cm"):
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase: {e}")
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])

def hour_bars(df: pd.DataFrame):
    if df.empty or "ts" not in df.columns:
        return pd.DataFrame({"hour":[], "count":[]})
    return (df.assign(hour=pd.to_datetime(df["ts"]).dt.floor("h"))
              .groupby("hour", as_index=False)
              .agg(count=("potato_id", "nunique")))

def bins_table(dfA: pd.DataFrame, dfB: pd.DataFrame):
    cols = [">60","50‚Äì60","40‚Äì50","30‚Äì40"]

    def count_bins(df: pd.DataFrame):
        if df.empty or ("width_cm" not in df.columns) or df["width_cm"].isna().all():
            n = df["potato_id"].nunique() if "potato_id" in df.columns else len(df)
            q = n // 4; r = n - 3*q
            return pd.Series({">60":r, "50‚Äì60":q, "40‚Äì50":q, "30‚Äì40":q})
        bins = [0,30,40,50,60,10_000]
        labels_all = ["<30","30‚Äì40","40‚Äì50","50‚Äì60",">60"]
        cut = pd.cut(df["width_cm"].fillna(-1), bins=bins, labels=labels_all, right=False, include_lowest=True)
        vc = cut.value_counts().reindex(labels_all).fillna(0).astype(int)
        return pd.Series({
            ">60":   int(vc[">60"]),
            "50‚Äì60": int(vc["50‚Äì60"]),
            "40‚Äì50": int(vc["40‚Äì50"]),
            "30‚Äì40": int(vc["30‚Äì40"]),
        })

    A = count_bins(dfA)
    B = count_bins(dfB)
    total = A
    collected = B
    discarded = (A - B).clip(lower=0)
    loss_pct = pd.Series({c: (0.0 if total[c]==0 else round(discarded[c]/total[c]*100, 1)) for c in cols})

    return pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":  cols,
        "–û–±—â–µ–µ":      [int(total[c])     for c in cols],
        "–°–æ–±—Ä–∞–Ω–æ":    [int(collected[c]) for c in cols],
        "–í—ã–±—Ä–æ—à–µ–Ω–æ":  [int(discarded[c]) for c in cols],
        "% –ü–æ—Ç–µ—Ä–∏":   [float(loss_pct[c]) for c in cols],
    })

# ====== –°–¢–†–ê–ù–ò–¶–´ ======
def page_login():
    header("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    with st.form("login_form", clear_on_submit=False):
        email = st.text_input("E-mail", placeholder="you@company.com")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
    if submitted:
        ok = True
        if USE_SUPABASE:
            try:
                resp = _sb.auth.sign_in_with_password({"email": email, "password": password})
                ok = bool(getattr(resp, "user", None))
                if not ok:
                    st.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                ok = False
        if ok:
            st.session_state["authed"] = True
            go("app")
    st.caption("–î–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")

def render_hour_chart(df):
    bars = hour_bars(df)
    if bars.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return
    chart = (
        alt.Chart(bars)
        .mark_bar()
        .encode(
            x=alt.X("hour:T", title="–î–∞—Ç–∞ –∏ —á–∞—Å"),
            y=alt.Y("count:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            tooltip=["hour:T","count:Q"]
        )
        .properties(height=280)
    )
    st.altair_chart(chart, use_container_width=True)

def page_dashboard_online():
    header("–û–Ω–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã–µ")

    c1, c2, c3, c4 = st.columns([1,1.2,1.2,2])
    with c1:
        point = st.selectbox("–¢–æ—á–∫–∞", ["A","B"], index=0)
    with c2:
        day = st.date_input("–î–∞—Ç–∞", value=date.today())
    with c3:
        st.caption("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ batch –ø–æ–º–æ–≥–∞–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥–æ–Ω")
    with c4:
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state["authed"] = False
            go("login")

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ batch (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    batch_tag = st.text_input("batch-—Ç–µ–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value="")

    # –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ –¥–µ–º–æ)
    start = datetime.combine(day, time.min).replace(tzinfo=timezone.utc)
    end   = datetime.combine(day, time.max).replace(tzinfo=timezone.utc)

    dfA = fetch_events("A", start, end, batch=batch_tag or None)
    dfB = fetch_events("B", start, end, batch=batch_tag or None)

    if dfA.empty and dfB.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Ñ–∏–ª—å—Ç—Ä batch.")
        st.stop()

    # –ë–∞–Ω–Ω–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.caption(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {SUPABASE_URL} ¬∑ batch: {batch_tag or '‚Äî'} ¬∑ –ø–µ—Ä–∏–æ–¥ (UTC): {start} ‚Äî {end}")

    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
    df_current = dfA if point == "A" else dfB
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
    render_hour_chart(df_current)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (A –∫–∞–∫ –æ–±—â–µ–µ, B –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–æ)
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
    df_view(bins_table(dfA, dfB))

# ====== MAIN (–±–µ–∑ –≤–∫–ª–∞–¥–∫–∏ ¬´–í–∏–¥–µ–æ-–¥–µ–º–æ¬ª) ======
def main():
    if not USE_SUPABASE:
        header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞")
        st.error("SUPABASE_URL / SUPABASE_ANON_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–∫–∞–∂–∏ –∏—Ö –≤ Secrets –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        st.stop()

    route = st.session_state.get("route", "login")
    authed = st.session_state.get("authed", False)

    if route == "login" and not authed:
        page_login()
        return

    page_dashboard_online()

if __name__ == "__main__":
    main()
