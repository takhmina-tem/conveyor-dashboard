# streamlit_app.py
import os
from datetime import datetime, date, time as dtime, timedelta, timezone
from typing import Optional
from io import BytesIO
import zipfile

import streamlit as st
import pandas as pd
import altair as alt
from zoneinfo import ZoneInfo

# ===== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è =====
TZ = ZoneInfo("Asia/Aqtobe")  # —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π
TARGET_DAY_LOCAL   = date(2025, 9, 4)  # "–≤—á–µ—Ä–∞"
TARGET_START_HOUR  = 14
TARGET_END_HOUR    = 19   # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (–∏—Ç–æ–≥–æ 5 —á–∞—Å–æ–≤: 14..18)
LIVE_MINUTES       = 60   # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç –∏–∑ –ë–î

# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", page_icon="ü•î", layout="wide")

# ===== –ö–ª—é—á–∏ Supabase =====
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ===== –°—Ç–∏–ª–∏ =====
st.markdown("""
<style>
  .block-container { padding-top: 1.5rem; }
  .title-row { display:flex; align-items:center; gap:12px; }
  .title-row h1 { margin:0; font-size:26px; font-weight:800; letter-spacing:.3px; }
  .date-pill { padding:4px 10px; border-radius:999px; background:#f2f2f2; font-size:13px; }
  hr { margin: 10px 0 14px 0; opacity:.25; }
</style>
""", unsafe_allow_html=True)

def header():
    st.markdown(
        f"<div class='title-row'><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1>"
        f"<span class='date-pill'>4 —Å–µ–Ω—Ç—è–±—Ä—è</span></div>",
        unsafe_allow_html=True
    )
    st.markdown("<hr/>", unsafe_allow_html=True)
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî —á—É—Ç—å –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if st.button("‚Üª –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", use_container_width=True):
        st.cache_data.clear()
        st.rerun()

# ===== –í—Ä–µ–º—è/–∫–æ–Ω–≤–µ—Ä—Å–∏–∏ =====
def to_aware_utc(dt: datetime) -> datetime:
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

def local_to_utc(d: date, hour: int) -> datetime:
    loc = datetime.combine(d, dtime(hour=hour)).replace(tzinfo=TZ)
    return loc.astimezone(timezone.utc)

def live_window_utc(minutes: int = LIVE_MINUTES) -> tuple[datetime, datetime]:
    now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
    return now_utc - timedelta(minutes=minutes), now_utc

# ===== –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö =====
@st.cache_data(ttl=5)
def fetch_events(point: Optional[str], start_dt: datetime, end_dt: datetime) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ts (UTC-aware), point, potato_id, width_cm/height_cm –∏–ª–∏ width/height (–≤ —Å–º)."""
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","width","height"])
    try:
        q = _sb.table("events").select("*").order("ts", desc=False)
        if point:
            q = q.eq("point", point)
        rows = q.gte("ts", to_aware_utc(start_dt).isoformat())\
                .lte("ts", to_aware_utc(end_dt).isoformat())\
                .execute().data
        df = pd.DataFrame(rows) if rows else pd.DataFrame()
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")
        for c in ("width_cm","height_cm","width","height"):
            if c in df.columns:
                df[c] = pd.to_numeric(df[c], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase: {e}")
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","width","height"])

# ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö =====
def add_mm_columns(df: pd.DataFrame) -> pd.DataFrame:
    d = df.copy()
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: *_cm; –∏–Ω–∞—á–µ width/height —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Å–º
    if "width_cm" in d.columns:
        d["width_mm"] = d["width_cm"] * 10.0
    elif "width" in d.columns:
        d["width_mm"] = d["width"] * 10.0
    else:
        d["width_mm"] = pd.NA

    if "height_cm" in d.columns:
        d["height_mm"] = d["height_cm"] * 10.0
    elif "height" in d.columns:
        d["height_mm"] = d["height"] * 10.0
    else:
        d["height_mm"] = pd.NA

    d["width_mm"]  = pd.to_numeric(d["width_mm"], errors="coerce")
    d["height_mm"] = pd.to_numeric(d["height_mm"], errors="coerce")
    return d

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º) =====
CAT_LABELS = ["<30 –º–º", "30‚Äì40 –º–º", "40‚Äì50 –º–º", "50‚Äì60 –º–º", ">60 –º–º"]
CAT_BINS_MM = [0, 30, 40, 50, 60, 1_000_000]

def bins_table_mm_collected(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    d = add_mm_columns(df)
    if "width_mm" not in d.columns or d["width_mm"].dropna().empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    cut = pd.cut(d["width_mm"].fillna(-1), bins=CAT_BINS_MM, labels=CAT_LABELS, right=False, include_lowest=True)
    vc = cut.value_counts().reindex(CAT_LABELS).fillna(0).astype(int)
    return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [int(vc[c]) for c in CAT_LABELS]})

# ===== ¬´–í—á–µ—Ä–∞—à–Ω–∏–µ¬ª —á–∞—Å—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—å: 14..18) =====
def fixed_target_hours_index() -> pd.DatetimeIndex:
    # —Å–æ–∑–¥–∞—ë–º 5 —á–∞—Å–æ–≤: 14:00, 15:00, 16:00, 17:00, 18:00 (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    hours_local = [datetime.combine(TARGET_DAY_LOCAL, dtime(h)) for h in range(TARGET_START_HOUR, TARGET_END_HOUR)]
    # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ –±–µ–∑ TZ
    return pd.DatetimeIndex(pd.to_datetime(hours_local)).tz_localize(None)

# ===== –ü–µ—Ä–µ–Ω–æ—Å live-–¥–∞–Ω–Ω—ã—Ö –≤ ¬´–≤—á–µ—Ä–∞—à–Ω–µ–µ¬ª –æ–∫–Ω–æ =====
def remap_live_to_target(df: pd.DataFrame, live_start_utc: datetime) -> pd.DataFrame:
    """
    –ö–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ¬´–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π¬ª ts_disp —Ç–∞–∫:
    - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 60 –º–∏–Ω—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —á–∞—Å–µ 14:00‚Äì15:00 –≤—á–µ—Ä–∞.
    –û—Å—å –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ —ç—Ç–æ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: 14..18, –ø—É—Å—Ç—ã–µ —á–∞—Å—ã = 0.
    """
    if df.empty or "ts" not in df.columns:
        return df
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –Ω–∞—á–∞–ª—É live-—á–∞—Å–∞
    offs = (df["ts"] - live_start_utc).dt.total_seconds().clip(lower=0)
    # ¬´–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è¬ª —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞: 4 —Å–µ–Ω—Ç 14:00 –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí UTC
    target_start_utc = local_to_utc(TARGET_DAY_LOCAL, TARGET_START_HOUR)
    df = df.copy()
    df["ts_disp"] = target_start_utc + pd.to_timedelta(offs, unit="s")
    return df

# ===== –ê–≥—Ä–µ–≥–∞—Ü–∏—è ¬´–°–æ–±—Ä–∞–Ω–æ –ø–æ —á–∞—Å–∞–º¬ª —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—É—Å—Ç—ã—Ö —á–∞—Å–æ–≤ =====
def hour_counts_collected_fixed(df_disp: pd.DataFrame) -> pd.DataFrame:
    # –ë–∞–∑–∞ —á–∞—Å–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–µ, –±–µ–∑ TZ –¥–ª—è –æ—Å–∏)
    base_hours = fixed_target_hours_index()
    if df_disp.empty or "ts_disp" not in df_disp.columns:
        return pd.DataFrame({"hour": base_hours, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(base_hours)})

    # –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º ts_disp –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ ‚Üí –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —á–∞—Å–∞ ‚Üí –±–µ–∑ TZ
    ts_local = df_disp["ts_disp"].dt.tz_convert(TZ)
    hours_naive = ts_local.dt.floor("h").dt.tz_localize(None)
    g = (
        pd.DataFrame({"hour": hours_naive, "potato_id": df_disp["potato_id"]})
        .groupby("hour", as_index=False)
        .agg(**{"–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": ("potato_id", "nunique")})
    )
    # –¥–∂–æ–∏–Ω–∏–º –∫ –±–∞–∑–µ —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å 0 —Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    out = pd.DataFrame({"hour": base_hours}).merge(g, on="hour", how="left")
    out["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"] = out["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"].fillna(0).astype(int)
    return out

# ===== –ì—Ä–∞—Ñ–∏–∫ =====
def render_hour_chart_fixed(df_disp: pd.DataFrame):
    hc = hour_counts_collected_fixed(df_disp)
    chart = (
        alt.Chart(hc)
        .mark_bar()
        .encode(
            x=alt.X("hour:T", title="–ß–∞—Å"),
            y=alt.Y("–°–æ–±—Ä–∞–Ω–æ (—à—Ç):Q", title="–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"),
            tooltip=[alt.Tooltip("hour:T", title="–ß–∞—Å"), alt.Tooltip("–°–æ–±—Ä–∞–Ω–æ (—à—Ç):Q")],
        )
        .properties(height=320, padding={"top": 10, "right": 12, "bottom": 44, "left": 8})
        .configure_axis(labelFontSize=12, titleFontSize=12)
    )
    st.altair_chart(chart, use_container_width=True)
    st.markdown("<div style='height:10px'></div>", unsafe_allow_html=True)
    return hc

# ===== –≠–∫—Å–ø–æ—Ä—Ç =====
def make_excel_bytes(hour_df: pd.DataFrame, bins_df: pd.DataFrame) -> tuple[bytes, str, str]:
    try:
        import xlsxwriter  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–≤—á–µ—Ä–∞)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    try:
        import openpyxl  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (–≤—á–µ—Ä–∞)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr("hour_flow.csv", hour_df.to_csv(index=False))
        zf.writestr("bins_mm.csv",  bins_df.to_csv(index=False))
    return buf.getvalue(), "zip", "application/zip"

# ===== –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–º) =====
DEFAULT_WEIGHT_G = {"<30 –º–º": 20.0, "30‚Äì40 –º–º": 48.0, "40‚Äì50 –º–º": 83.0, "50‚Äì60 –º–º": 130.0, ">60 –º–º": 205.0}
DEFAULT_PRICE_KG = {"<30 –º–º": 0.0,  "30‚Äì40 –º–º": 0.0,  "40‚Äì50 –º–º": 0.0,  "50‚Äì60 –º–º": 0.0,  ">60 –º–º": 0.0}

def capital_calculator_mm(bins_df: pd.DataFrame):
    st.markdown("### –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞")
    counts = dict(zip(bins_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], bins_df["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"]))

    col_w = st.columns(5)
    col_p = st.columns(5)
    weights_g = {}
    prices_kg = {}

    for i, cat in enumerate(CAT_LABELS):
        with col_w[i]:
            weights_g[cat] = st.number_input(
                f"–í–µ—Å ({cat}), –≥/—à—Ç",
                min_value=0.0,
                step=10.0,
                value=float(DEFAULT_WEIGHT_G.get(cat, 0.0)),
                format="%.2f",
                key=f"calc_w_{cat}",
            )
        with col_p[i]:
            prices_kg[cat] = st.number_input(
                f"–¶–µ–Ω–∞ ({cat}), —Ç–≥/–∫–≥",
                min_value=0.0,
                step=10.0,
                value=float(DEFAULT_PRICE_KG.get(cat, 0.0)),
                format="%.2f",
                key=f"calc_p_{cat}",
            )

    kg_totals = {cat: (counts.get(cat, 0) * weights_g.get(cat, 0.0)) / 1000.0 for cat in CAT_LABELS}
    subtotals = {cat: kg_totals[cat] * prices_kg.get(cat, 0.0) for cat in CAT_LABELS}
    total_sum = round(sum(subtotals.values()), 2)

    calc_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":        CAT_LABELS,
        "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)":     [int(counts.get(c, 0)) for c in CAT_LABELS],
        "–í–µ—Å, –≥/—à—Ç":        [weights_g[c] for c in CAT_LABELS],
        "–ò—Ç–æ–≥–æ, –∫–≥":        [round(kg_totals[c], 3) for c in CAT_LABELS],
        "–¶–µ–Ω–∞, —Ç–≥/–∫–≥":      [prices_kg[c] for c in CAT_LABELS],
        "–°—É–º–º–∞, —Ç–≥":        [round(subtotals[c], 2) for c in CAT_LABELS],
    })
    st.dataframe(calc_df, use_container_width=True)
    st.subheader(f"–ò—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª: **{total_sum:,.2f} —Ç–≥**".replace(",", " "))

# ===== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è ‚Äú–í–µ—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞‚Äù =====
def render_weight_table(day: date):
    import random
    rng = random.Random(1000 + int(day.strftime("%Y%m%d")))
    hours = [10, 12, 14, 16]
    weights = [round(rng.uniform(0.12, 0.22), 3) for _ in hours]  # —Ç–æ–Ω–Ω—ã
    rows = []
    for h, w in zip(hours, weights):
        ts = datetime.combine(day, dtime(h, 0))
        rows.append({"–î–∞—Ç–∞ –∏ —á–∞—Å": ts.strftime("%Y-%m-%d %H:%M"), "–í–µ—Å, —Ç": w})
    df = pd.DataFrame(rows)
    st.markdown("### –í–µ—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–¥–µ–º–æ)")
    st.dataframe(df, use_container_width=True)

# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====
def page_dashboard():
    header()

    # 1) Live-–æ–∫–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å) ‚Üí —á–∏—Ç–∞–µ–º —Ç–æ—á–∫—É A
    live_start_utc, live_end_utc = live_window_utc(LIVE_MINUTES)
    df_live = fetch_events("A", live_start_utc, live_end_utc)

    # 2) –ü–µ—Ä–µ–Ω–æ—Å–∏–º —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ ¬´–≤—á–µ—Ä–∞—à–Ω–∏–π¬ª 14:00‚Äì15:00
    df_disp = remap_live_to_target(df_live, live_start_utc)

    # 3) –ú–µ—Ç—Ä–∏–∫–∞ ¬´–°–æ–±—Ä–∞–Ω–æ (—à—Ç)¬ª
    collected_total = df_disp["potato_id"].nunique() if not df_disp.empty else 0
    st.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{collected_total}")

    # 4) –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—å 14..18 ‚Äî –¥–∞–ª—å—à–µ —á–∞—Å—ã –ø–æ–∫–∞–∂—É—Ç—Å—è –Ω—É–ª—è–º–∏)
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
    hc = render_hour_chart_fixed(df_disp)

    # 5) –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)")
    bins_df = bins_table_mm_collected(df_disp)
    st.dataframe(bins_df, use_container_width=True)

    # 6) –≠–∫—Å–ø–æ—Ä—Ç
    hour_export = hc.rename(columns={"hour": "–î–∞—Ç–∞ –∏ —á–∞—Å"}) if not hc.empty else pd.DataFrame(columns=["–î–∞—Ç–∞ –∏ —á–∞—Å","–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"])
    file_bytes, ext, mime = make_excel_bytes(hour_export, bins_df)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
        data=file_bytes,
        file_name=f"potato_report_2025-09-04_14-19.{ext}",
        mime=mime,
        use_container_width=True
    )

    # 7) –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞
    capital_calculator_mm(bins_df)

    # 8) –í–µ—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–¥–µ–º–æ)
    render_weight_table(TARGET_DAY_LOCAL)

# ===== MAIN =====
def main():
    page_dashboard()

if __name__ == "__main__":
    main()
