# streamlit_app.py
import os
from datetime import datetime, date, time as dtime, timedelta, timezone
from typing import Optional
from io import BytesIO
import zipfile

import streamlit as st
import pandas as pd
import altair as alt
from zoneinfo import ZoneInfo

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è =====
TZ = ZoneInfo("Asia/Aqtobe")     # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
TARGET_DAY_LOCAL   = date(2025, 9, 4)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤—á–µ—Ä–∞": 4 —Å–µ–Ω—Ç—è–±—Ä—è
TARGET_START_HOUR  = 14                 # 14,15,16,17,18 (5 —á–∞—Å–æ–≤)
TARGET_END_HOUR    = 19                # –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", page_icon="ü•î", layout="wide")

# ===== –ö–ª—é—á–∏ Supabase =====
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ===== –°—Ç–∏–ª–∏ =====
st.markdown("""
<style>
  .block-container { padding-top: 1.5rem; }
  .title-row { display:flex; align-items:center; gap:12px; }
  .title-row h1 { margin:0; font-size:26px; font-weight:800; letter-spacing:.3px; }
  .date-pill { padding:4px 10px; border-radius:999px; background:#f2f2f2; font-size:13px; }
  hr { margin: 10px 0 14px 0; opacity:.25; }
</style>
""", unsafe_allow_html=True)

def header():
    st.markdown(
        f"<div class='title-row'><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1>"
        f"<span class='date-pill'>4 —Å–µ–Ω—Ç—è–±—Ä—è</span></div>",
        unsafe_allow_html=True
    )
    st.markdown("<hr/>", unsafe_allow_html=True)
    if st.button("‚Üª –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.rerun()

# ===== –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ =====
def to_aware_utc(dt: datetime) -> datetime:
    return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)

def local_to_utc(d: date, hour: int) -> datetime:
    return datetime.combine(d, dtime(hour=hour)).replace(tzinfo=TZ).astimezone(timezone.utc)

def fixed_target_hours_index() -> pd.DatetimeIndex:
    hours_local = [datetime.combine(TARGET_DAY_LOCAL, dtime(h))
                   for h in range(TARGET_START_HOUR, TARGET_END_HOUR)]
    return pd.DatetimeIndex(pd.to_datetime(hours_local)).tz_localize(None)

# ===== –ß—Ç–µ–Ω–∏–µ Supabase (–ø–æ—Å–ª–µ–¥–Ω–∏–π batch, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ—á–∫–∏) =====
def get_latest_batch() -> Optional[str]:
    if not USE_SUPABASE:
        return None
    try:
        r = _sb.table("events").select("batch,ts").order("ts", desc=True).limit(1).execute()
        if r.data and r.data[0].get("batch"):
            return r.data[0]["batch"]
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å latest batch: {e}")
    return None

def fetch_events_by_batch(batch: str) -> pd.DataFrame:
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","potato_id","width_cm","height_cm","width","height","batch"])
    try:
        rows = _sb.table("events").select("*").eq("batch", batch).order("ts", desc=False).execute().data
        df = pd.DataFrame(rows) if rows else pd.DataFrame()
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")
        for c in ("width_cm","height_cm","width","height"):
            if c in df.columns:
                df[c] = pd.to_numeric(df[c], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è batch={batch}: {e}")
        return pd.DataFrame()

# ===== –†–∞–∑–º–µ—Ä—ã ‚Üí –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
def add_mm_columns(df: pd.DataFrame) -> pd.DataFrame:
    d = df.copy()
    # width_cm/height_cm –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã; –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî width/height (—Ç–æ–∂–µ –≤ —Å–º)
    d["width_mm"]  = pd.to_numeric(d.get("width_cm", d.get("width")), errors="coerce") * 10.0
    d["height_mm"] = pd.to_numeric(d.get("height_cm", d.get("height")), errors="coerce") * 10.0
    return d

CAT_LABELS = ["<30 –º–º", "30‚Äì40 –º–º", "40‚Äì50 –º–º", "50‚Äì60 –º–º", ">60 –º–º"]
CAT_BINS_MM = [0, 30, 40, 50, 60, 1_000_000]

def bins_table_mm_collected(df: pd.DataFrame) -> pd.DataFrame:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —à–∏—Ä–∏–Ω–µ (–º–º) –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º potato_id."""
    if df.empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    d = add_mm_columns(df)
    # –¥–µ–¥—É–ø –ø–æ –∫–ª—É–±–Ω—é (–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    if "potato_id" in d.columns:
        d = d.sort_values("ts").drop_duplicates(subset="potato_id", keep="last")
    if "width_mm" not in d.columns or d["width_mm"].dropna().empty:
        return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(CAT_LABELS)})
    cut = pd.cut(d["width_mm"].fillna(-1), bins=CAT_BINS_MM, labels=CAT_LABELS,
                 right=False, include_lowest=True)
    vc = cut.value_counts().reindex(CAT_LABELS).fillna(0).astype(int)
    return pd.DataFrame({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CAT_LABELS,
                         "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [int(vc[c]) for c in CAT_LABELS]})

# ===== –ü–µ—Ä–µ–Ω–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ ‚Üí –≤—á–µ—Ä–∞ 14‚Äì19 =====
def remap_run_to_target(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ batch –Ω–∞ —à–∫–∞–ª—É ¬´–≤—á–µ—Ä–∞ 14‚Äì19¬ª:
    —á–∞—Å 0 –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø—É—Å–∫–∞ -> 14‚Äì15, —á–∞—Å 1 -> 15‚Äì16, ... (–∫–ª–∏–ø –¥–æ 5 —á–∞—Å–æ–≤).
    """
    if df.empty or "ts" not in df.columns:
        return df
    d = df.copy()
    run_start = d["ts"].min()  # UTC, aware
    ts_floor  = d["ts"].dt.floor("h")
    elapsed_h = ((ts_floor - run_start) / pd.Timedelta(hours=1)).astype(int).clip(lower=0, upper=4)  # 0..4
    minute_off = d["ts"] - ts_floor
    target_start_utc = local_to_utc(TARGET_DAY_LOCAL, TARGET_START_HOUR)
    d["ts_disp"] = target_start_utc + pd.to_timedelta(elapsed_h, unit="h") + minute_off
    return d

def hour_counts_collected_fixed(df_disp: pd.DataFrame) -> pd.DataFrame:
    base_hours = fixed_target_hours_index()
    if df_disp.empty or "ts_disp" not in df_disp.columns:
        return pd.DataFrame({"hour": base_hours, "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [0]*len(base_hours)})
    ts_local = df_disp["ts_disp"].dt.tz_convert(TZ)
    hours_naive = ts_local.dt.floor("h").dt.tz_localize(None)
    g = (pd.DataFrame({"hour": hours_naive, "potato_id": df_disp["potato_id"]})
           .groupby("hour", as_index=False)
           .agg(**{"–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": ("potato_id", "nunique")}))
    out = pd.DataFrame({"hour": base_hours}).merge(g, on="hour", how="left")
    out["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"] = out["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"].fillna(0).astype(int)
    return out

def render_hour_chart_fixed(df_disp: pd.DataFrame):
    hc = hour_counts_collected_fixed(df_disp)
    chart = (
        alt.Chart(hc)
        .mark_bar()
        .encode(
            x=alt.X("hour:T", title="–ß–∞—Å"),
            y=alt.Y("–°–æ–±—Ä–∞–Ω–æ (—à—Ç):Q", title="–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"),
            tooltip=[alt.Tooltip("hour:T", title="–ß–∞—Å"),
                     alt.Tooltip("–°–æ–±—Ä–∞–Ω–æ (—à—Ç):Q")],
        )
        .properties(height=320, padding={"top": 10, "right": 12, "bottom": 44, "left": 8})
        .configure_axis(labelFontSize=12, titleFontSize=12)
    )
    st.altair_chart(chart, use_container_width=True)
    st.markdown("<div style='height:10px'></div>", unsafe_allow_html=True)
    return hc

# ===== –≠–∫—Å–ø–æ—Ä—Ç =====
def make_excel_bytes(hour_df: pd.DataFrame, bins_df: pd.DataFrame) -> tuple[bytes, str, str]:
    try:
        import xlsxwriter  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (04.09)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    try:
        import openpyxl  # noqa
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl", datetime_format="yyyy-mm-dd hh:mm") as w:
            hour_df.to_excel(w, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (04.09)")
            bins_df.to_excel(w, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–º)")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass
    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr("hour_flow.csv", hour_df.to_csv(index=False))
        zf.writestr("bins_mm.csv",  bins_df.to_csv(index=False))
    return buf.getvalue(), "zip", "application/zip"

# ===== –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω—É–ª–∏) =====
DEFAULT_WEIGHT_G = {c: 0.0 for c in CAT_LABELS}
DEFAULT_PRICE_KG = {c: 0.0 for c in CAT_LABELS}

def capital_calculator_mm(bins_df: pd.DataFrame):
    st.markdown("### –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞")
    counts = dict(zip(bins_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], bins_df["–°–æ–±—Ä–∞–Ω–æ (—à—Ç)"]))
    col_w = st.columns(5); col_p = st.columns(5)
    weights_g, prices_kg = {}, {}
    for i, cat in enumerate(CAT_LABELS):
        with col_w[i]:
            weights_g[cat] = st.number_input(
                f"–í–µ—Å ({cat}), –≥/—à—Ç", min_value=0.0, step=1.0,
                value=float(DEFAULT_WEIGHT_G.get(cat, 0.0)), format="%.2f",
                key=f"calc_w_{cat}"
            )
        with col_p[i]:
            prices_kg[cat] = st.number_input(
                f"–¶–µ–Ω–∞ ({cat}), —Ç–≥/–∫–≥", min_value=0.0, step=1.0,
                value=float(DEFAULT_PRICE_KG.get(cat, 0.0)), format="%.2f",
                key=f"calc_p_{cat}"
            )
    kg_totals = {cat: (counts.get(cat, 0) * weights_g.get(cat, 0.0)) / 1000.0 for cat in CAT_LABELS}
    subtotals = {cat: kg_totals[cat] * prices_kg.get(cat, 0.0) for cat in CAT_LABELS}
    total_sum = round(sum(subtotals.values()), 2)
    calc_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":   CAT_LABELS,
        "–°–æ–±—Ä–∞–Ω–æ (—à—Ç)": [int(counts.get(c, 0)) for c in CAT_LABELS],
        "–í–µ—Å, –≥/—à—Ç":   [weights_g[c] for c in CAT_LABELS],
        "–ò—Ç–æ–≥–æ, –∫–≥":   [round(kg_totals[c], 3) for c in CAT_LABELS],
        "–¶–µ–Ω–∞, —Ç–≥/–∫–≥": [prices_kg[c] for c in CAT_LABELS],
        "–°—É–º–º–∞, —Ç–≥":   [round(subtotals[c], 2) for c in CAT_LABELS],
    })
    st.dataframe(calc_df, use_container_width=True)
    st.subheader(f"–ò—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª: **{total_sum:,.2f} —Ç–≥**".replace(",", " "))

# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====
def page_dashboard():
    header()

    latest_batch = get_latest_batch()
    if not latest_batch:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ª–æ–Ω–∫–∞ batch –ø—É—Å—Ç–∞). –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∏—à–µ—Ç batch –¥–ª—è —Å–æ–±—ã—Ç–∏–π.")
        return

    # —á–∏—Ç–∞–µ–º –≤–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π batch
    df_run = fetch_events_by_batch(latest_batch)

    # –ø–µ—Ä–µ–Ω–æ—Å —á–∞—Å–æ–≤ –≤ ¬´–≤—á–µ—Ä–∞ 14‚Äì19¬ª
    df_disp = remap_run_to_target(df_run)

    # –º–µ—Ç—Ä–∏–∫–∞: –°–æ–±—Ä–∞–Ω–æ (—à—Ç) –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º potato_id
    total_collected = df_run["potato_id"].nunique() if not df_run.empty else 0
    st.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{total_collected}")

    # –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 14..18)
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
    hc = render_hour_chart_fixed(df_disp)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º), –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º potato_id
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–º)")
    bins_df = bins_table_mm_collected(df_run)
    st.dataframe(bins_df, use_container_width=True)

    # –≠–∫—Å–ø–æ—Ä—Ç
    hour_export = hc.rename(columns={"hour": "–î–∞—Ç–∞ –∏ —á–∞—Å"})
    file_bytes, ext, mime = make_excel_bytes(hour_export, bins_df)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
        data=file_bytes,
        file_name=f"potato_report_{latest_batch}.{ext}",
        mime=mime,
        use_container_width=True
    )

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    capital_calculator_mm(bins_df)

# ===== MAIN =====
def main():
    page_dashboard()

if __name__ == "__main__":
    main()
