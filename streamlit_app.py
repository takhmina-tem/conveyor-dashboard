# streamlit_app.py
import os
import time
import random
from datetime import datetime, date, time as dtime, timedelta, timezone
from typing import Optional
from io import BytesIO
import zipfile

import streamlit as st
import pandas as pd
import altair as alt

from zoneinfo import ZoneInfo
TZ = ZoneInfo("Asia/Aqtobe")  # GMT+5 (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ ======
def local_day_bounds_to_utc(d: date) -> tuple[datetime, datetime]:
    start_local = datetime.combine(d, dtime.min).replace(tzinfo=TZ)
    end_local   = datetime.combine(d, dtime.max).replace(tzinfo=TZ)
    return start_local.astimezone(timezone.utc), end_local.astimezone(timezone.utc)

def _ensure_aware_utc(dt: datetime) -> datetime:
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

def week_bounds(d: date) -> tuple[date, date]:
    start = d - timedelta(days=d.weekday())
    end = start + timedelta(days=6)
    return start, end

# ====== –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ======
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
    page_icon="ü•î",
    layout="wide",
)

# ====== –ö–ª—é—á–∏ (secrets/environment) ======
SUPABASE_URL = st.secrets.get("SUPABASE_URL", os.getenv("SUPABASE_URL"))
SUPABASE_ANON_KEY = st.secrets.get("SUPABASE_ANON_KEY", os.getenv("SUPABASE_ANON_KEY"))
DEFAULT_BATCH = st.secrets.get("DEFAULT_BATCH", os.getenv("DEFAULT_BATCH", ""))  # —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª—Å—è ¬´—Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫¬ª

USE_SUPABASE = bool(SUPABASE_URL and SUPABASE_ANON_KEY)
_sb = None
if USE_SUPABASE:
    try:
        from supabase import create_client
        _sb = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase: {e}")
        USE_SUPABASE = False

# ====== –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ======
st.markdown(
    """
    <style>
      .block-container { padding-top: 2.25rem; }
      .hdr { display:flex; justify-content:space-between; align-items:center; }
      .hdr h1 { margin:0; font-size:26px; font-weight:800; letter-spacing:.3px; }
      .hdr .sub { opacity:.8 }
      .hdr + .spacer { height: 10px; }
      hr { margin: 10px 0 22px 0; opacity:.25; }
      .stDateInput, .stNumberInput, .stTextInput { margin-bottom: .35rem; }
    </style>
    """,
    unsafe_allow_html=True,
)

def header(sub: str | None = None):
    st.markdown(
        f"<div class='hdr'><h1>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É—á—ë—Ç–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è</h1>{f'<div class=\"sub\">{sub}</div>' if sub else ''}</div>",
        unsafe_allow_html=True
    )
    st.markdown('<div class="spacer"></div>', unsafe_allow_html=True)
    st.markdown("<hr/>", unsafe_allow_html=True)

def df_view(df: pd.DataFrame, caption: str = ""):
    if caption:
        st.caption(caption)
    st.dataframe(df, use_container_width=True)

# ====== –°–µ—Å—Å–∏—è/—Ä–æ—É—Ç–µ—Ä (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ======
if "authed" not in st.session_state:
    st.session_state["authed"] = True
if "route" not in st.session_state:
    st.session_state["route"] = "app"
if "day_picker" not in st.session_state:
    st.session_state["day_picker"] = date.today()

def go(page: str):
    st.session_state["route"] = page
    st.rerun()

# ====== –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à —Å TTL –¥–ª—è –ª—ë–≥–∫–æ–≥–æ –ø—É–ª–ª–∏–Ω–≥–∞) ======
@st.cache_data(ttl=5)  # –Ω–µ–±–æ–ª—å—à–æ–π TTL –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def fetch_events(point: Optional[str], start_dt: datetime, end_dt: datetime, batch: Optional[str] = None) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ts (UTC-aware), point, potato_id, width_cm, height_cm, batch."""
    if not USE_SUPABASE:
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])
    try:
        q = _sb.table("events").select("*").order("ts", desc=False)
        if point:
            q = q.eq("point", point)
        if batch:
            q = q.eq("batch", batch)
        start_iso = _ensure_aware_utc(start_dt).isoformat()
        end_iso   = _ensure_aware_utc(end_dt).isoformat()
        data = q.gte("ts", start_iso).lte("ts", end_iso).execute().data
        df = pd.DataFrame(data) if data else pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç: –¥–µ–ª–∞–µ–º AWARE-UTC
        if "ts" in df.columns:
            df["ts"] = pd.to_datetime(df["ts"], utc=True, errors="coerce")
        for col in ("width_cm","height_cm"):
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce")
        return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase: {e}")
        return pd.DataFrame(columns=["ts","point","potato_id","width_cm","height_cm","batch"])

# ====== –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å ts –≤—Å–µ–≥–¥–∞ UTC-aware) ======
def hour_counts(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty or "ts" not in df.columns:
        return pd.DataFrame({"hour": [], "count": []})
    ts_local = df["ts"].dt.tz_convert(TZ)
    hours_naive = ts_local.dt.floor("h").dt.tz_localize(None)
    return (
        pd.DataFrame({"hour": hours_naive, "potato_id": df["potato_id"]})
          .groupby("hour", as_index=False)
          .agg(count=("potato_id", "nunique"))
    )

def day_counts(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty or "ts" not in df.columns:
        return pd.DataFrame({"day": [], "count": []})
    ts_local = df["ts"].dt.tz_convert(TZ)
    days_naive = ts_local.dt.floor("D").dt.tz_localize(None)
    return (
        pd.DataFrame({"day": days_naive, "potato_id": df["potato_id"]})
          .groupby("day", as_index=False)
          .agg(count=("potato_id", "nunique"))
    )

# ====== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ======
CATEGORIES = ["<30", "30‚Äì40", "40‚Äì50", "50‚Äì60", ">60"]

def bins_table(dfA: pd.DataFrame, dfB: pd.DataFrame) -> pd.DataFrame:
    """A=–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ, B=–°–æ–±—Ä–∞–Ω–æ. –°–µ–π—á–∞—Å –ü–æ—Ç–µ—Ä–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º, –°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ."""
    def count_bins(df: pd.DataFrame) -> pd.Series:
        if df.empty or ("width_cm" not in df.columns):
            return pd.Series({c: 0 for c in CATEGORIES})
        bins = [0,30,40,50,60,10_000]
        labels = CATEGORIES
        cut = pd.cut(df["width_cm"].fillna(-1), bins=bins, labels=labels, right=False, include_lowest=True)
        vc = cut.value_counts().reindex(labels).fillna(0).astype(int)
        return vc

    A = count_bins(dfA)
    # B = A (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ¬´–°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ¬ª)
    B = A.copy()

    return pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":  CATEGORIES,
        "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ": [int(A[c]) for c in CATEGORIES],
        "–°–æ–±—Ä–∞–Ω–æ":    [int(B[c]) for c in CATEGORIES],
    })

# ====== –ß–∞—Ä—Ç –ø–æ —á–∞—Å–∞–º (–°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ) ======
def render_hour_chart_grouped(dfA: pd.DataFrame):
    ha = hour_counts(dfA).rename(columns={"count": "initial"})
    if ha.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return pd.DataFrame()

    # –°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ
    merged = ha.copy()
    merged["collected"] = merged["initial"]

    long_df = pd.concat([
        merged[["hour", "collected"]].rename(columns={"collected": "–ó–Ω–∞—á–µ–Ω–∏–µ"}).assign(–°–µ–≥–º–µ–Ω—Ç="–°–æ–±—Ä–∞–Ω–æ"),
        merged[["hour", "initial"]].rename(columns={"initial": "–ó–Ω–∞—á–µ–Ω–∏–µ"}).assign(–°–µ–≥–º–µ–Ω—Ç="–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ"),
    ], ignore_index=True)

    x_axis = alt.X(
        "hour:T",
        title="–î–∞—Ç–∞ –∏ —á–∞—Å",
        axis=alt.Axis(titlePadding=24, labelOverlap=True, labelFlush=True, titleAnchor="start"),
    )

    chart = (
        alt.Chart(long_df)
        .mark_bar()
        .encode(
            x=x_axis,
            y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", stack="zero"),
            color=alt.Color("–°–µ–≥–º–µ–Ω—Ç:N", title="", scale=alt.Scale(domain=["–°–æ–±—Ä–∞–Ω–æ", "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ"])),
            tooltip=[alt.Tooltip("hour:T", title="–ß–∞—Å"), alt.Tooltip("–°–µ–≥–º–µ–Ω—Ç:N"), alt.Tooltip("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–®—Ç")],
        )
        .properties(height=320, padding={"top": 10, "right": 12, "bottom": 44, "left": 8})
        .configure_axis(labelFontSize=12, titleFontSize=12)
    )

    st.altair_chart(chart, use_container_width=True)
    st.markdown("<div style='height:12px'></div>", unsafe_allow_html=True)
    return merged

# ====== Excel –≤—ã–≥—Ä—É–∑–∫–∞ ======
def make_excel_bytes(hour_df: pd.DataFrame, bins_df: pd.DataFrame) -> tuple[bytes, str, str]:
    try:
        import xlsxwriter  # noqa: F401
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter", datetime_format="yyyy-mm-dd hh:mm") as writer:
            hour_df.to_excel(writer, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
            bins_df.to_excel(writer, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass

    try:
        import openpyxl  # noqa: F401
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl", datetime_format="yyyy-mm-dd hh:mm") as writer:
            hour_df.to_excel(writer, index=False, sheet_name="–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
            bins_df.to_excel(writer, index=False, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return buf.getvalue(), "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    except Exception:
        pass

    buf = BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
        zf.writestr("–ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º.csv", hour_df.to_csv(index=False))
        zf.writestr("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏.csv",    bins_df.to_csv(index=False))
    return buf.getvalue(), "zip", "application/zip"

# ====== –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ======
def page_dashboard_online():
    header()

    # –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: batch –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    left, mid, right = st.columns([1.5, 1, 1])
    with left:
        batch_tag = st.text_input("batch-—Ç–µ–≥ (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—É—Å–∫—É)", value=DEFAULT_BATCH or "")
    with mid:
        if st.button("‚Üª –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", use_container_width=True):
            st.cache_data.clear()
            st.rerun()
    with right:
        if USE_SUPABASE:
            try:
                _sb.table("events").select("potato_id").limit(1).execute()
                st.caption("‚úÖ Supabase: OK")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Supabase –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")

    st.markdown("<div style='height:6px'></div>", unsafe_allow_html=True)

    # ==== LIVE (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π batch) ====
    st.subheader("Live: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç (—Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫)")
    now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
    live_start = now_utc - timedelta(hours=1)

    dfA_live = fetch_events("A", live_start, now_utc, batch=batch_tag or None)
    # –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: ¬´–°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ¬ª, B —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º

    live_init = dfA_live["potato_id"].nunique() if not dfA_live.empty else 0
    live_coll = live_init  # –°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ

    m1, m2 = st.columns(2)
    m1.metric("–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ (—à—Ç)", value=f"{live_init}")
    m2.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{live_coll}")

    with st.expander("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (A)"):
        if not dfA_live.empty:
            df_tail = dfA_live.sort_values("ts", ascending=False).head(30).copy()
            df_tail["ts"] = df_tail["ts"].dt.tz_convert(TZ).dt.strftime("%Y-%m-%d %H:%M:%S")
            df_view(df_tail[["ts","potato_id","width_cm","height_cm","batch"]])
        else:
            st.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ batch.")

    st.markdown("<hr/>", unsafe_allow_html=True)

    # ==== –î–ï–ù–¨ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ batch) ====
    st.subheader("–î–µ–Ω—å (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫)")
    dcol1, dcol2 = st.columns([1, 1])
    with dcol1:
        st.date_input("–î–∞—Ç–∞", key="day_picker")
    with dcol2:
        st.caption(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}")

    day = st.session_state["day_picker"]
    start_day_utc, end_day_utc = local_day_bounds_to_utc(day)

    dfA = fetch_events("A", start_day_utc, end_day_utc, batch=batch_tag or None)

    # –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
    total_initial = dfA["potato_id"].nunique() if not dfA.empty else 0
    total_collected = total_initial  # –°–æ–±—Ä–∞–Ω–æ = –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ

    dm1, dm2 = st.columns(2)
    dm1.metric("–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ (—à—Ç)", value=f"{total_initial}")
    dm2.metric("–°–æ–±—Ä–∞–Ω–æ (—à—Ç)", value=f"{total_collected}")

    # –ø–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º (A; collected = initial)
    st.markdown("### –ü–æ—Ç–æ–∫ –ø–æ —á–∞—Å–∞–º")
    merged_hours = render_hour_chart_grouped(dfA)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    bins_df = bins_table(dfA, dfA)  # B=A
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    df_view(bins_df[["–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ","–°–æ–±—Ä–∞–Ω–æ"]])

    # Excel-–æ—Ç—á—ë—Ç (—á–∞—Å—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    ha = hour_counts(dfA).rename(columns={"count": "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ"})
    hour_export = ha.rename(columns={"hour": "–î–∞—Ç–∞ –∏ —á–∞—Å"}).copy()
    hour_export["–°–æ–±—Ä–∞–Ω–æ"] = hour_export["–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ"]

    file_bytes, ext, mime = make_excel_bytes(hour_export, bins_df)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel/CSV)",
        data=file_bytes,
        file_name=f"potato_report_{day.isoformat()}." + ext,
        mime=mime,
        use_container_width=True
    )

# ====== App ======
def page_app():
    page_dashboard_online()

# ====== Main ======
def main():
    page_app()

if __name__ == "__main__":
    main()
